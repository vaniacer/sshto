#!/bin/bash
#--------------------------{ Default values }---------------------------------------------------------------------------
  REMOTE=8080   # Remote port for tunneling.
   LOCAL=18080  # Local  port for tunneling.
   GUEST=$USER  # Alternative username to login with.
    DEST='~'    # Destination folder on target server to download\upload files.
    TIME=60     # Timer for tunneling command. Tunnel will be closed after 60 seconds, but it will stay open if used.
  EDITOR=nano   # SSH confile editor.
  LSEXIT=true   # Perform ls on exit true|false.
     OPT=$1     # Options.
     KEY=~/.ssh/id_rsa.pub # SSH key to use in command Sshkey(Add my ssh key to host).
CONFILES=$(shopt -s nullglob; echo ~/.ssh/{config,config*[!~]})   # SSH confiles list.
knwhosts=~/.ssh/known_hosts    # Path to known_hosts file.
 confile=~/.sshtorc            # Path to config file, have to be chmod'ed to 600.
 tmpfile=/tmp/sshtorc-${USER}  # Path to tmp file to save selected context.

sshto_script[0]=~              # Path to sshto script
sshto_script[1]=.sshto_script  # Sshto script filename
sshto_script[2]="${sshto_script[0]}/${sshto_script[1]}" # Sshto script full
#------------------------{ Add some tabs }------------------------------------------------------------------------------
tabbed(){ target=$target gnome-terminal --title=$target --tab -qe "${1/_target_/$target}"; } # Terminal command for tabs
#------------------------{ Add your commands to this lists }------------------------------------------------------------
cmdlist_renew(){
    cmdlist=(
        #Command#  #Description#
        "Username" "Change ssh username to \Z2$GUEST\Z0"
        "Add tab"  "Add terminal tab with \Z3sshto\Z0 for \Z4$target\Z0"
        "Ssh tab"  "Add terminal tab with \Z3ssh\Z0 to \Z4$target\Z0"
        ''         ''
        "ls  -la"  "List Files"
        "free -h"  "Show free memory"
        "df  -ih"  "Show free inodes"
        "df   -h"  "Show free disk space"
        "Custom"   "Run custom command on \Z4$target\Z0"
        "Script"   "Run custom script on \Z4$target\Z0"
        ''         ''
        'Yes'      "Say 'yes' to SSH"
        "Info"     "Full system info"
        "Sshkey"   "Add my ssh key to \Z4$target\Z0"
        "Alias"    "Add my usefull aliases to \Z4$target\Z0"
        "Copy"     "Copy selected file or dir to \Z4$target\Z0"
        ''         ''
        "Dest"     "Change destination folder \Z4$DEST\Z0 on \Z4$target\Z0"
        "Upload"   "Upload   file or folder from \Z4$PWD\Z0 to \Z4$target:${DEST}\Z0"
        "Download" "Download file or folder from \Z4$target:${DEST}\Z0 to \Z4$PWD\Z0"
        ''         ''
        "Local"    "Change local  port \Z1$LOCAL\Z0"
        "Remote"   "Change remote port \Z1$REMOTE\Z0"
        "Tunnel"   "Start portunneling from \Z4$target\Z0 port \Z1$REMOTE\Z0 to local port \Z1$LOCAL\Z0"
        ''         ''
        "ShowConf" "Show ssh config for this host"
        "EditConf" "Edit ssh config for this host"
    )
    cmdlist_group=(
        #Command#  #Description#
        "Username" "Change ssh username to \Z2$GUEST\Z0"
        "Add tabs" "Add terminal tabs with \Z3sshto\Z0 for hosts in \Z4$group\Z0 group"
        "Ssh tabs" "Add terminal tabs with \Z3ssh\Z0 to hosts from \Z4$group\Z0 group"
        ''         ''
        "ls  -la"  "List Files"
        "free -h"  "Show free memory"
        "df  -ih"  "Show free inodes"
        "df   -h"  "Show free disk space"
        "Custom"   "Run custom command on \Z4$group\Z0"
        "Script"   "Run custom script on \Z4$group\Z0"
        ''         ''
        'Yes'      "Say 'yes' to SSH"
        "Info"     "Full system info"
        "Alias"    "Add my usefull aliases to \Z4$group\Z0"
        "Copy"     "Copy selected file or dir to \Z4$group\Z0"
        ''         ''
        "Dest"     "Change destination folder \Z4$DEST\Z0 on \Z4$group\Z0"
        "Upload"   "Upload   file or folder from \Z4$PWD\Z0 to \Z4$group:${DEST}\Z0"
    )
}
#--------------------------------------------------------------------+--------------------------------------------------
#Color picker, usage: printf ${BLD}${CUR}${RED}${BBLU}"Hello!)"${DEF}|
#-------------------------+--------------------------------+---------+
#       Text color        |       Background color         |         |
#-----------+-------------+--------------+-----------------+         |
# Base color|Lighter shade|  Base color  | Lighter shade   |         |
#-----------+-------------+--------------+-----------------+         |
BLK='\e[30m'; blk='\e[90m'; BBLK='\e[40m'; bblk='\e[100m' #| Black   |
RED='\e[31m'; red='\e[91m'; BRED='\e[41m'; bred='\e[101m' #| Red     |
GRN='\e[32m'; grn='\e[92m'; BGRN='\e[42m'; bgrn='\e[102m' #| Green   |
YLW='\e[33m'; ylw='\e[93m'; BYLW='\e[43m'; bylw='\e[103m' #| Yellow  |
BLU='\e[34m'; blu='\e[94m'; BBLU='\e[44m'; bblu='\e[104m' #| Blue    |
MGN='\e[35m'; mgn='\e[95m'; BMGN='\e[45m'; bmgn='\e[105m' #| Magenta |
CYN='\e[36m'; cyn='\e[96m'; BCYN='\e[46m'; bcyn='\e[106m' #| Cyan    |
WHT='\e[37m'; wht='\e[97m'; BWHT='\e[47m'; bwht='\e[107m' #| White   |
#----------------------------------------------------------+---------+
# Effects                                                            |
#--------------------------------------------------------------------+
DEF='\e[0m'   #Default color and effects                             |
BLD='\e[1m'   #Bold\brighter                                         |
DIM='\e[2m'   #Dim\darker                                            |
CUR='\e[3m'   #Italic font                                           |
UND='\e[4m'   #Underline                                             |
INV='\e[7m'   #Inverted                                              |
COF='\e[?25l' #Cursor Off                                            |
CON='\e[?25h' #Cursor On                                             |
#--------------------------------------------------------------------+
# Text positioning, usage: XY 10 10 'Hello World!'                   |
XY(){ printf "\e[$2;${1}H$3"; }                                     #|
# Print line, usage: line - 10 | line -= 20 | line 'Hello World!' 20 |
line(){ printf -v _L %$2s; printf -- "${_L// /$1}"; }               #|
# Create sequence like {0..(X-1)}, usage: que 10                     |
que(){ printf -v _N %$1s; _N=(${_N// / 1}); printf "${!_N[*]}"; }   #|
#------------{ Check that dialog and gawk are installed }------------+
install_help="
${BLD}sshto$DEF requires that the package '${GRN}%b$DEF' is installed.
Type this into the terminal and press return:

    ${BLD}%b$DEF

Then run ${BLD}sshto$DEF again
"
how_to_install(){
    local package=$1
    which yum     &> /dev/null && installer="yum -y install $package"
    which brew    &> /dev/null && installer="brew install $package"
    which apt-get &> /dev/null && installer="apt-get install -y $package"
    printf -- "$install_help" "$package" "$installer"
    exit 1
}

for package in dialog gawk; { which $package &> /dev/null || how_to_install $package; }
#------------------------{ Waiting animation }--------------------------------------------------------------------------
cursor () {
    case $1 in
         on) stty  echo; printf "$CON";;
        off) stty -echo; printf "$COF";;
    esac
}

   x=$[COLUMNS/2-3]
   y=$[  LINES/2-3]
sand=( ⠁  ⠂  ⠄  ' ' )
#  {   small digits    }
sd=(₀ ₁ ₂ ₃ ₄ ₅ ₆ ₇ ₈ ₉)
bs='⠴⠷⠦' # bottom sand pile
ts='⠖'    #  top  sand pile
WAIT(){
    clear; cursor off; i=0; start=$SECONDS
    XY $[x-1]  $y    $UND$BLD$RED'       '$DEF                     # _______
    XY $[x-1] $[y+1]         $RED'╲'$DIM$UND'     '$DEF$red'╱'$DEF # ╲_____╱
    XY  $x    $[y+2]         $BLU'(  '$BLD$WHT'•'$BLD$BLU')'$DEF   #  (  •)
    XY  $x    $[y+3]         $BLU' ╲'$YLW"$ts"$BLD$BLU'╱'$DEF      #   ╲⠖╱
    XY  $x    $[y+4]         $BLU" ╱$YLW${sand[$i]}$BLD$BLU╲"$DEF  #   ╱⠂╲
    XY  $x    $[y+5]         $BLU'('$YLW"$bs"$BLD$BLU')'$DEF       #  (⠴⠷⠦)
    XY $[x-1] $[y+6]         $RED'╱'$RED'‾‾‾‾‾'$BLD$RED'╲'$DEF     # ╱‾‾‾‾‾╲
    XY $[x-1] $[y+7]     $DIM$RED'‾‾‾‾‾‾‾'$DEF                     # ‾‾‾‾‾‾‾
    ( while true; do sleep 0.07
        printf -v counter "%03d" $[SECONDS-start]
        small="${sd[${counter:0:1}]}${sd[${counter:1:1}]}${sd[${counter:2:1}]}"
        XY $[x-1] $[y+1] $RED'╲'$DIM$UND" $small "$DEF$red'╱'$DEF
        XY  $x    $[y+4] $BLU" ╱$YLW${sand[$i]}$BLD$BLU╲"$DEF
        ((i++)); (($i==${#sand[@]})) && i=0;
    done ) & waiter=$!
}

GO() { [[ -e /proc/$waiter ]] && kill $waiter; cursor on; clear; }

check_confile(){
    [[ -e $confile  ]] || return
    [[ $(stat -c "%a %U %G" "$confile") == "600 $USER $USER" ]] && . "$confile"
}

#------------------------{ Pause function }-----------------------------------------------------------------------------
pause(){
    local  mess=${1:-'press any key to continue'}
    printf "\n$COF$BLD$mess\n"
    read   -srn1
    printf "\n$DEF$CON"
}

#------------------------{ Yes to ssh }---------------------------------------------------------------------------------
ssh_yes(){
    hostname=${hostnames["$target"]}
    fprint=($(ssh-keyscan -H "$hostname" 2>/dev/null))
    grep -q "${fprint[2]}" "$knwhosts" || echo "${fprint[@]}" >> "$knwhosts"
}

#------------------------{ System Info commands }-----------------------------------------------------------------------
system_info(){
    ssh $SSH_OPT $target "
        printf '\n${BLD}Hostname:${DEF}\n'
        hostname

        printf '\n${BLD}Interfaces:${DEF}\n'
        ip a

        printf '\n${BLD}Memory:${DEF}\n'
        LANG=Us free --si -h

        printf '\n${BLD}CPU:${DEF}\n'
        lscpu

        printf '\n${BLD}Disk:${DEF}\n'
        df -h; echo; df -ih; echo; lsblk

        printf '\n${BLD}Software:${DEF}\n'
        uname -a; echo
        [[ -e /usr/bin/lsb_release ]] && { lsb_release -a; echo; }
        [[ -e /usr/bin/java        ]] && { java  -version; echo; }
        [[ -e /usr/bin/psql        ]] && { psql  -V      ; echo; }
        [[ -e /usr/sbin/nginx      ]] && { nginx -v      ; echo; }

        printf '${BLD}Logged in Users:${DEF}\n'
        who

        printf '\n${BLD}Port usage info:${DEF}\n'
        netstat -tulpn 2> /dev/null

        printf '\n${BLD}Processes:${DEF}\n'
        top -bcn1 | head -n30
    "
}

#------------------------{ Show\Edit ssh config }-----------------------------------------------------------------------
show_conf(){ clear; ssh -G $target; pause; }
edit_conf(){ $EDITOR $(grep -ril "Host[[:space:]]$target" $CONFILES); }

#------------------------{ SSH to target server }-----------------------------------------------------------------------
go_to_target(){ clear; ssh $SSH_OPT $target || pause; }

#------------------------{ Add aliases }--------------------------------------------------------------------------------
add_aliases(){
    scp $SSH_OPT ~/.bash_aliases $target:~
    ssh $SSH_OPT $target "grep '. ~/.bash_aliases' .bashrc || echo '. ~/.bash_aliases' >> .bashrc"
}

#------------------------{ Run function on a group of servers }---------------------------------------------------------
group_run(){
    local func group_list data
    func="$1"
    group_list=("${list[@]:2}")
    SSH_OPT_CUR="$SSH_OPT"
    SSH_OPT="$SSH_OPT -o ConnectTimeout=10 -o BatchMode=true"
    case $func in tabbed*)
        for ((i=0;  i<${#group_list[@]}; i+=2)); do
              target="${group_list[$i]}"
              tabbed "${2/_target_/$target}"
        done
        return;;
    esac
    WAIT
    data=$(
        for ((i=0;  i<${#group_list[@]}; i+=2)); do
              target="${group_list[$i]}"
          [[ $target =~ ^-+.*-+$ ]] && continue
          (  code="$BLD$GRN"
             data=$( $func 2>&1 ) || code="$BLD$RED"
             data=$( sed ':a;N;$!ba;s/\n/\\n/g' <<< "$data" )
             echo "$code----{ $target }----$DEF\\n${data:-Command did not output anything.}\\n"
          )  &
        done
    )
    GO; printf -- '%b' "$data"
    SSH_OPT="$SSH_OPT_CUR"
}

#------------------------{ Run command/script }-------------------------------------------------------------------------
run_command(){ ssh $SSH_OPT $target $command; }
run_script (){
    scp -r $SSH_OPT "${sshto_script[2]}" $target:~/ || return 1
    ssh    $SSH_OPT "$target" "~/${sshto_script[1]}"
}

#------------------------{ Add ssh key }--------------------------------------------------------------------------------
add_sshkey(){ clear; ssh_yes > /dev/null; ssh-copy-id -i $KEY $SSH_OPT $target; }

#------------------------{ Tunnelling command}--------------------------------------------------------------------------
portunneling(){ ssh $SSH_OPT $target -f -L 127.0.0.1:$LOCAL:127.0.0.1:$REMOTE sleep $TIME; }

#------------------------{ Exit function }------------------------------------------------------------------------------
bye(){
    printf "\n$DEF$CON"
    clear
    $LSEXIT || exit 0
    lsopts='--color=auto'
    [[ $(uname -s) == "Darwin" ]] && lsopts='-G'
    ls $lsopts
    exit 0
};  trap bye INT

#============================>-{ Dialog functions }-<===================================================================
#------------------------{ Change alternative username }----------------------------------------------------------------
username(){
    new_user=$(dialog --ok-label "CHANGE" --cancel-label "BACK" --output-fd 1 --max-input 20 \
                        --aspect 100 --colors --inputbox 'Change alternative username' 10 30 $GUEST)
	case $new_user:$? in
                 *:0) GUEST=${new_user:-$GUEST}; SSH_OPT="-oUser=$GUEST"; USERNOTE="Username changed to \Z2$GUEST\Z0.";;
                 *:*) return;;
	esac
}

#------------------------{ Create custom command/script }---------------------------------------------------------------
custom(){
    local runner=
    [[ $group ]] && runner='group_run'
    custom_command=$(dialog --ok-label "RUN" --cancel-label "BACK" --inputbox --output-fd 1 \
                     "Write down your command here:" 8 120 "$custom_command"); ec=$?
          command="$custom_command"
	case $command:$ec in
	           '':0) custom;;
                *:0) clear; $runner run_command; pause;;
                *:*) return;;
	esac
}

script(){
    [[ -f ${sshto_script[2]} ]] || {
        echo  -e '#!/bin/bash\necho "Running sshto script"' > "${sshto_script[2]}"
        chmod +x "${sshto_script[2]}"
    }

    script_text=$(cat "${sshto_script[2]}")
    dialog --ok-label "RUN" --extra-button --extra-label "EDIT" --help-button --help-label "BACK" \
           --msgbox "$script_text" 40 120
    case $? in
         0) [[ $script_text ]] || script; clear; $runner run_script; pause;;
         3) $EDITOR "${sshto_script[2]}"; script;;
         2) second_dialog;;
	esac
}

#------------------------{ Change local port for tunnelling }-----------------------------------------------------------
local_port(){
    new_local=$(dialog --ok-label "CHANGE" --cancel-label "BACK" --output-fd 1 --max-input 5 \
                       --aspect 100 --colors --inputbox 'Change local port' 10 30 $LOCAL)
    LOCAL=${new_local:-$LOCAL}
}

#------------------------{ Change remote port for tunnelling }----------------------------------------------------------
remote_port(){
    new_remote=$(dialog --ok-label "CHANGE" --cancel-label "BACK" --output-fd 1 --max-input 5 \
                        --aspect 100 --colors --inputbox 'Change remote port' 10 30 $REMOTE)
    REMOTE=${new_remote:-$REMOTE}
}

#------------------------{ Upload\Download dialogs }--------------------------------------------------------------------
downpath(){
    new_path=$(dialog --ok-label "CHANGE" --cancel-label "BACK" --output-fd 1 --max-input 100 \
                       --aspect 100 --colors --inputbox 'Change download folder' 10 50 $DEST)
    DEST=${new_path:-$DEST}
    dfilelist=
}

uploader(){
    printf "Uploading $BLD$ufilename$DEF\n"
    scp -r $SSH_OPT $ufilename $target:"$DEST/"
}

copy_files(){
    local runner=
    [[ $group ]] && runner='group_run'
    ufilename=$(dialog --ok-label "COPY" --cancel-label "BACK" --output-fd 1 --aspect 100 --colors --fselect $PWD/ 10 80)
	case $ufilename:$? in
         $PWD|$PWD/:0) return;;
                  *:0) clear; $runner uploader; pause;;
                  *:*) return;;
	esac;              copy_files
}

upload(){
    local runner=
    [[ $group ]] && runner='group_run'
    ufilelist=( $(ls -sh1 $PWD | awk '{print $2,$1}') )
	ufilename=$(dialog --output-fd 1 --ok-label "UPLOAD" --cancel-label "BACK" \
                       --menu "Select file\folder to upload:" 0 0 0 "${ufilelist[@]:2}")
	case $? in
         0) [[ $ufilename ]] || upload
            clear; $runner uploader; pause;;
         *) return;;
	esac;   upload
}

download(){
    [[ $dfilelist ]] || {
        dfilelist=$(ssh $SSH_OPT $target ls -sh1 $DEST 2>&1) \
            && dfilelist=( $(awk '{print $2,$1}' <<< "$dfilelist") ) \
            || {
                clear
                echo "$dfilelist"
                pause
                dfilelist=
                second_dialog
            }
    }
	dfilename=$(dialog --output-fd 1 --ok-label "DOWNLOAD" --cancel-label "BACK" \
                      --menu "Select file\folder to download:" 0 0 0 "${dfilelist[@]:2}")
	case $? in
         0) [[ $dfilename ]] || download
            clear
            printf "Downloading $BLD$dfilename$DEF\n"
            scp -r $SSH_OPT $target:"$DEST/$dfilename" . || pause;;
         *) return;;
	esac;   download
}

#------------------------{ Switch menu mode to contents view or full list }---------------------------------------------
save_tmp(){ echo "$1" > "$tmpfile"; chmod 600 "$tmpfile"; }
new_list(){
    list=(); match=
    for item in "${fullist[@]}"; {
        case         $item:$match in
                 *{\ *\ }*:1) break  ;;
           *{\ $filter\ }*:*) match=1;;
        esac
        [[ $match ]] && list+=( "$item" )
    }
    [[ ${list[*]} ]] && save_tmp "filter='$filter'" || { list=( "${fullist[@]}" ); rm "$tmpfile"; }
}

contents_menu(){
	filter=$(dialog --output-fd 1 --ok-label "SELECT" --extra-button --extra-label "RUN COMMAND" --cancel-label "BACK" \
                    --no-items --menu "Select list of hosts:" 0 0 0 "All" "${content[@]}")
	case $filter:$? in
             All:0) list=( "${fullist[@]}" )
                    save_tmp       "filter=";;
               *:3) second_dialog "$filter" ;;
               *:0) new_list;;
	esac;           first_dialog
}

#------------------------{ First dialog - Select host }-----------------------------------------------------------------
first_dialog(){
    group=
    dfilelist=
    [[ $OPT =~ name ]] && oklbl='GET NAME' extra= || oklbl='CONNECT' extra='--extra-button'
	target=$(dialog --output-fd 1 --colors $extra --help-button \
	                --extra-label  "RUN COMMAND" \
	                --help-label   "CONTENTS" \
	                --ok-label     "$oklbl" \
                    --cancel-label "EXIT" \
	                --menu "Select host to connect to. $USERNOTE" 0 0 0 "${list[@]}")
	case $target:$? in
       *{\ *\ }*:0) first_dialog ;;
       *{\ *\ }*:3) filter=${target//*\{ }; filter=${filter// \}*}; second_dialog "$filter";;
               *:0) [[ $OPT =~ name ]] && return || { go_to_target; first_dialog; };;
               *:2) contents_menu;;
      	       *:3) second_dialog;;
      	       *:*) bye;;
  	esac
}

#------------------------{ Second dialog - Select command }-------------------------------------------------------------
second_dialog(){
    local headings  commands                    connect                  singleornot         runner
        group="$1"  commands='cmdlist[@]'       connect='--extra-button' singleornot='host'  runner=
    [[ $group ]] && commands='cmdlist_group[@]' connect= filter="$group" singleornot='group' runner='group_run'
    headings="Select command to run on $singleornot \Z4${group:-$target}\Z0. $USERNOTE"
    new_list
    cmdlist_renew
	command=$(dialog --ok-label "RUN" --cancel-label "BACK" --output-fd 1 $connect --extra-label "CONNECT" --colors \
                     --menu "$headings" 0 0 0 "${!commands}")
	case $command:$? in
       "Add tab"*:0) $runner tabbed "$0";;
       "Ssh tab"*:0) $runner tabbed "ssh $SSH_OPT _target_";;
            Alias:0) clear; $runner add_aliases; pause;;
             Info:0) clear; $runner system_info; pause;;
              Yes:0) clear; $runner ssh_yes    ; pause;;
           Sshkey:0) add_sshkey  ;;
             Copy:0) copy_files  ;;
           Upload:0) upload      ;;
           Custom:0) custom      ;;
           Script:0) script      ;;
         Username:0) username    ;;
             Dest:0) downpath    ;;
         Download:0) download    ;;
            Local:0) local_port  ;;
           Remote:0) remote_port ;;
           Tunnel:0) portunneling;;
         ShowConf:0) show_conf   ;;
         EditConf:0) edit_conf   ;;
                *:3) go_to_target;;
                *:0) clear; $runner run_command; pause;;
                *:*) first_dialog;;
	esac;            second_dialog "$group"
}

#-------------{ Create hosts list. Get hosts and descriptions from ~/.ssh/config. }-------------------------------------
declare    -A      hostnames
while read -r name hostname desc; do
    case $name in
        'DUMMY') name="{ $desc }" name_length=${#name}
                 name_left=$[(40-name_length)/2] name_right=$[40-(name_left+name_length)]
                 printf -v tmp "%${name_left}s_NAME_%${name_right}s"
                 tmp=${tmp// /-}  name=${tmp//_NAME_/$name}
                 content+=( "$desc" ); desc=$(line - 20);;
           '#'*) continue;;
    esac
    hostnames["$name"]=$hostname #Create host-hostname pairs in hostnames array
    fullist+=("$name" "$desc")   #Add Host and Description to the list
done < <(gawk '
/Host /{
    strt=1
    host=$2
    desc=gensub(/^.*Host .* #(.*)/, "\\1", "g", $0)
    desc=gensub(/(.*)#.*/,          "\\1", "g", desc)
    next
}
strt && host == "DUMMY"{
    hostname=$2
    print host, "DUMMY", desc
    strt=0
}
tolower($strt) ~ /hostname/{
    hostname=$2
    print host, hostname, desc
    strt=0
}'  $CONFILES)

list=( "${fullist[@]}" )
[[ -e $tmpfile ]] && . "$tmpfile"
[[    $filter  ]] &&    new_list

#--{ Go baby, GO!) }--
check_confile
[[ $target      ]] || first_dialog
[[ $OPT =~ name ]] && { echo $target; exit; }
[[ $target      ]] && second_dialog
